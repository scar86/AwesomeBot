#!/usr/bin/env python

import bitso # put the package from https://github.com/bitsoex/bitso-py on your python env
import sys
from pprint import pprint
from  scarpkg import logStart, logStop, logMsg, Log, get_info, Bot
import getopt
import __main__
import os
Tid=''
logPath='/tmp'
verbose=False
Tinfo=''
Tsilent=False

def get_arg(argv):
    try:
        opts, args = getopt.getopt(argv,"hm:sI:l:v",["message=","silent=","log=","verbose=","info="])
    except getopt.GetoptError:
        print 'bitso_balance -I <File_to_variables>'
        print '-l <logpath> default /tmp '
        print '-v "verbose output and write to log"'
        sys.exit(2)
    for opt, arg in opts:
        if opt == '-h':
            print 'bitso_balance -I <File_to_variables>'
            print '-l <logpath> default /tmp '
            print '-v "verbose output and write to log"'
            sys.exit()
        elif opt in ("-s", "--silent"):
            global Tsilent
            Tsilent = True
        elif opt in ("-m", "--message"):
            global Tmsg
            Tmsg = arg
        elif opt in ("-l","--log"):
            global logPath
            logPath = arg
        elif opt in ("-I","--info"):
            global Tinfo
            Tinfo = arg
        elif opt in ("-v","--verbose"):
            global verbose
            verbose = 'yes'


def get_bitso_balance(key=None,secret=None):
    api = bitso.Api(key,secret)
    try:
        balance = api.balances() #using some undermethos of the bitso api
    except:
        log.msg("Failed to connect to bitso api, verify key and secret are correct")
        sys.exit(1)
        #return "Failed to connect to bitso api, verify key and secret are correct"
        #sys.exit(1)
    lst=[]
    txt=[]
    for a in balance.currencies:
        if a == 'currencies' or a == 'mxn':
            pass
        elif getattr(balance, a).total:
            lst.append((a,getattr(balance, a).total))
            #print "For {0} you have {1}".format(a,getattr(balance, a).total)
        #if a['total']:
            #print "For {0} you have {1}".format(a['total'],a['currency'])
    
    total_mx=0.0
    for coin, total in lst:
        tick = api.ticker("{0}_mxn".format(coin))
        log.msg("Coin {0} currently 1 in mxn ${1:}".format(coin,tick.last))
        txt.append("Coin {0} currently 1 in mxn ${1:}".format(coin,tick.last))
        
        log.msg("For {0} you have {1:>12} in mxn ${2:.2f}".format(coin,total,total*tick.last))
        txt.append("For {0} you have {1:>12} in mxn ${2:.2f}".format(coin,total,total*tick.last))
        total_mx += float(total*tick.last)
    
    log.msg("Total in MXN : ${0:.2f}".format(total_mx))
    txt.append("Total in MXN : ${0:.2f}".format(total_mx))
    return '\n'.join(txt)

if __name__ == "__main__":
    get_arg(sys.argv[1:])
    log = Log(logPath,verbose)
    INFO = get_info(Tinfo)
    
    Tmsg=get_bitso_balance(key=INFO['bitso']['key'],secret=INFO['bitso']['secret'])
    if not Tid:
        Tid = INFO['telegram']['id']
    if Tsilent:
        log.msg("Silent mode, not sending Telegram msg")
    else:
        my_bot=Bot(INFO['telegram']['token'],Tid,INFO['telegram']['user'])
        log.msg("Sendinf bitso information to user {0}".format(INFO['telegram']['user']))
        my_bot.msg(Tmsg)
    log.stop()
    sys.exit(0)

